// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ORMAdapter.Contexts;

#nullable disable

namespace ORMAdapter.Migrations
{
    [DbContext(typeof(WarehouseDbContext))]
    [Migration("20250805202803_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Balance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitOfMeasurementId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UnitOfMeasurementId");

                    b.HasIndex("ResourceId", "UnitOfMeasurementId")
                        .IsUnique();

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Domain.Entities.IncomingDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("IncomingDocuments");
                });

            modelBuilder.Entity("Domain.Entities.IncomingResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IncomingDocumentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitOfMeasurementId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IncomingDocumentId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("IncomingResources");
                });

            modelBuilder.Entity("Domain.Entities.OutgoingDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("OutgoingDocuments");
                });

            modelBuilder.Entity("Domain.Entities.OutgoingResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OutgoingDocumentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitOfMeasurementId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OutgoingDocumentId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("OutgoingResources");
                });

            modelBuilder.Entity("Domain.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Domain.Entities.UnitOfMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("UnitsOfMeasurement");
                });

            modelBuilder.Entity("Domain.Entities.Balance", b =>
                {
                    b.HasOne("Domain.Entities.Resource", "Resource")
                        .WithMany("Balances")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany("Balances")
                        .HasForeignKey("UnitOfMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("Domain.Entities.IncomingResource", b =>
                {
                    b.HasOne("Domain.Entities.IncomingDocument", "IncomingDocument")
                        .WithMany("IncomingResources")
                        .HasForeignKey("IncomingDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Resource", "Resource")
                        .WithMany("IncomingResources")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany("IncomingResources")
                        .HasForeignKey("UnitOfMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IncomingDocument");

                    b.Navigation("Resource");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("Domain.Entities.OutgoingDocument", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("OutgoingDocuments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Domain.Entities.OutgoingResource", b =>
                {
                    b.HasOne("Domain.Entities.OutgoingDocument", "OutgoingDocument")
                        .WithMany("OutgoingResources")
                        .HasForeignKey("OutgoingDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Resource", "Resource")
                        .WithMany("OutgoingResources")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany("OutgoingResources")
                        .HasForeignKey("UnitOfMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OutgoingDocument");

                    b.Navigation("Resource");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("OutgoingDocuments");
                });

            modelBuilder.Entity("Domain.Entities.IncomingDocument", b =>
                {
                    b.Navigation("IncomingResources");
                });

            modelBuilder.Entity("Domain.Entities.OutgoingDocument", b =>
                {
                    b.Navigation("OutgoingResources");
                });

            modelBuilder.Entity("Domain.Entities.Resource", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("IncomingResources");

                    b.Navigation("OutgoingResources");
                });

            modelBuilder.Entity("Domain.Entities.UnitOfMeasurement", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("IncomingResources");

                    b.Navigation("OutgoingResources");
                });
#pragma warning restore 612, 618
        }
    }
}
